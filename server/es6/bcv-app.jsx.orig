import HomeView from './components/HomeView';
import PayloadView from './components/PayloadView';
import ListTransactionsView from './components/ListTransactionsView';
import SearchByBusinessIdView from './components/SearchByBusinessIdView';
import SearchByTransactionIdView from './components/SearchByTransactionIdView';
<<<<<<< HEAD
import SearchByTextView from './components/SearchByTextView';
import TrackAndVerifyView from './components/TrackAndVerifyView';
=======
>>>>>>> 454a37eeae393ea65729a0eeabc02949c311378f
import SetupView from './components/SetupView';
import SyncStatisticsView from './components/SyncStatisticsView';
import StartSyncView from './components/StartSyncView';
import React from 'react';
import ReactDOM from 'react-dom';
import { BrowserRouter, Route, Switch, Redirect} from 'react-router-dom';
import {backChainStore} from './store/BackChainStore';
import BackChainActions from './BackChainActions';

const RoutedApp = () => (
  <BrowserRouter>
    <Switch>
<<<<<<< HEAD
      {/* exact will match /index but not /index/2 etc */}
      <Route exat path="/index" render={(props) => (<HomeView store={backChainStore} {...props}/>)} />
      <Route path="/payload" render={(props) => (<PayloadView store={backChainStore} {...props}/>)} />
      <Route path="/listTransactions" render={(props) => (<ListTransactionsView store={backChainStore} {...props}/>)} />  
=======
      {/* exact will match /home but not /home/2 etc */}
      <Route exact path="/"><Redirect from='/' to='/home'/></Route>
      <Route path="/home" render={(props) => (<HomeView store={backChainStore} {...props}/>)} />
      <Route path="/payload"  render={(props) => (<PayloadView store={backChainStore} {...props}/>)} />
      <Route path="/listTransactions" render={(props) => (<ListTransactionsView store={backChainStore} {...props}/>)} />
>>>>>>> 454a37eeae393ea65729a0eeabc02949c311378f
      <Route path="/businessId" render={(props) => (<SearchByBusinessIdView store={backChainStore} {...props}/>)} />
      <Route path="/transactionId" render={(props) => (<SearchByTransactionIdView store={backChainStore} {...props}/>)} />
      <Route path="/setup" render={(props) => (<SetupView store={backChainStore} {...props}/>)} />
      <Route path="/syncStatistics" render={(props) => (<SyncStatisticsView store={backChainStore} {...props}/>)} />
      <Route path="/startSync" render={(props) => (<StartSyncView store={backChainStore} {...props}/>)} />
      {/*<Route component={404 Not Found}/> we can create a component for all non existing pages, this is like the else condition if not matching any of the above*/}
    </Switch>
  </BrowserRouter>
);

window.BackchainVerifyAPI = {
  setup: (renderTo, options) => {
    BackChainActions.init(backChainStore);
    
    options = options || {};
    const componentToRender = options.showOnlyVerifyView
      ? <TrackAndVerifyView store={backChainStore} hideProgressBar={true}/>
      : <RoutedApp/>;
    
    if (typeof renderTo == 'string') {
      renderTo = $(renderTo)[0];
    }
    ReactDOM.render(componentToRender, renderTo);
  },

  loadTransactions: (transactions) => {
    BackChainActions.loadTransactions(transactions);
  }
};